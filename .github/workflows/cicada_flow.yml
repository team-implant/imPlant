name: imPlant CI/CD Pipeline
on:
  push:
    branches: [ main, master, develop, DEV_Backend ]
  pull_request:
    branches: [ main, master, develop ]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Regular builds (unchanged)
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./Backend/DotNetSQL
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-backend:latest
        no-cache: true
    
    - name: Build and push MLService
      uses: docker/build-push-action@v4
      with:
        context: ./Backend/MLService
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-mlservice:latest
        no-cache: true
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./Frontend
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-frontend:latest
        no-cache: true
    
    # Setup .NET for builds
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          8.0.x
          9.0.x
    
    # ARM64 Backend with workaround
    - name: Build Backend for ARM64
      run: |
        # Create a modified Dockerfile that skips the build step
        cd ./Backend/DotNetSQL
        
        # Build on the GitHub runner
        dotnet publish -c Release -o ./publish
        
        # Create a dockerfile that just copies the pre-built files
        cat > Dockerfile.armcopy << EOF
        FROM mcr.microsoft.com/dotnet/aspnet:8.0-jammy-arm64v8
        WORKDIR /app
        COPY ./publish/ .
        ENTRYPOINT ["dotnet", "DotNetSQL.dll"]
        EOF
        
        # Let Docker build using the pre-built files
        docker buildx build --platform linux/arm64 -f Dockerfile.armcopy -t ghcr.io/${{ github.repository_owner }}/implant/implant-backend-arm64:latest --push .
    
    # ARM64 IoT Server with workaround
    - name: Build IoT Server for ARM64
      run: |
        # Create a modified Dockerfile that skips the build step
        cd ./IoT/IoT_server/TcpGrpcBridgeServer
        
        # Build on the GitHub runner
        dotnet publish -c Release -o ./publish
        
        # Create a dockerfile that just copies the pre-built files
        cat > Dockerfile.armcopy << EOF
        FROM mcr.microsoft.com/dotnet/aspnet:8.0-jammy-arm64v8
        WORKDIR /app
        COPY ./publish/ .
        EXPOSE 5000 23
        ENTRYPOINT ["dotnet", "TcpGrpcBridgeServer.dll"]
        EOF
        
        # Let Docker build using the pre-built files
        docker buildx build --platform linux/arm64 -f Dockerfile.armcopy -t ghcr.io/${{ github.repository_owner }}/implant/iot-server-arm64:latest --push .