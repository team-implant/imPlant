name: imPlant CI/CD Pipeline
on:
  push:
    branches: [ main, master, develop, DEV_Backend ]
  pull_request:
    branches: [ main, master, develop ]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Build and push standard x86_64 images
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./Backend/DotNetSQL
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-backend:latest
        no-cache: true
    
    - name: Build and push MLService
      uses: docker/build-push-action@v4
      with:
        context: ./Backend/MLService
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-mlservice:latest
        no-cache: true
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./Frontend
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-frontend:latest
        no-cache: true
    
    # Set up .NET for ARM builds
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          8.0.x
          9.0.x
    
    # ARM64 Backend Build - two-stage approach
    - name: Build Backend .NET app for ARM
      run: |
        cd ./Backend/DotNetSQL
        dotnet publish -c Release -o ./publish
    
    - name: Create simple Dockerfile for ARM Backend
      run: |
        cd ./Backend/DotNetSQL
        echo 'FROM mcr.microsoft.com/dotnet/aspnet:8.0-jammy-arm64v8' > Dockerfile.simple
        echo 'WORKDIR /app' >> Dockerfile.simple
        echo 'COPY ./publish/ .' >> Dockerfile.simple
        echo 'ENTRYPOINT ["dotnet", "DotNetSQL.dll"]' >> Dockerfile.simple
    
    - name: Build and push Backend (ARM64)
      uses: docker/build-push-action@v4
      with:
        context: ./Backend/DotNetSQL
        file: ./Backend/DotNetSQL/Dockerfile.simple
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/implant-backend-arm64:latest
        platforms: linux/arm64
        no-cache: true
    
    # ARM64 IoT Server Build
    - name: Build IoT Server .NET app for ARM
      run: |
        cd ./IoT/IoT_server/TcpGrpcBridgeServer
        dotnet publish -c Release -o ./publish
    
    - name: Create simple Dockerfile for ARM IoT Server
      run: |
        cd ./IoT/IoT_server/TcpGrpcBridgeServer
        echo 'FROM mcr.microsoft.com/dotnet/aspnet:8.0-jammy-arm64v8' > Dockerfile.simple
        echo 'WORKDIR /app' >> Dockerfile.simple
        echo 'COPY ./publish/ .' >> Dockerfile.simple
        echo 'EXPOSE 5000 23' >> Dockerfile.simple
        echo 'ENTRYPOINT ["dotnet", "TcpGrpcBridgeServer.dll"]' >> Dockerfile.simple
    
    - name: Build and push IoT Server (ARM64)
      uses: docker/build-push-action@v4
      with:
        context: ./IoT/IoT_server/TcpGrpcBridgeServer
        file: ./IoT/IoT_server/TcpGrpcBridgeServer/Dockerfile.simple
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/implant/iot-server-arm64:latest
        platforms: linux/arm64
        no-cache: true