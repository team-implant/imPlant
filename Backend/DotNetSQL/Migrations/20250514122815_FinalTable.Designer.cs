// <auto-generated />
using System;
using DotNetSQL.EFC;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetSQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250514122815_FinalTable")]
    partial class FinalTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetSQL.Entities.MeasurementData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AirHumidity")
                        .HasColumnType("float");

                    b.Property<double>("LightIntensity")
                        .HasColumnType("float")
                        .HasColumnName("Light");

                    b.Property<double>("SoilHumidity")
                        .HasColumnType("float");

                    b.Property<int?>("SoilHumidityDetailsId")
                        .HasColumnType("int");

                    b.Property<double>("TankFillLevel")
                        .HasColumnType("float")
                        .HasColumnName("tank_fill_level");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SoilHumidityDetailsId");

                    b.ToTable("MeasurementData");
                });

            modelBuilder.Entity("DotNetSQL.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Plants", (string)null);
                });

            modelBuilder.Entity("DotNetSQL.Entities.ServoCalibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Angle")
                        .HasColumnType("float")
                        .HasColumnName("angle");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("Servo_Calibration", (string)null);
                });

            modelBuilder.Entity("DotNetSQL.Entities.SoilHumidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MinValue")
                        .HasColumnType("float")
                        .HasColumnName("min_threshold");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("Soil_Humidity_Thresholds", (string)null);
                });

            modelBuilder.Entity("DotNetSQL.Entities.SoilMeasurement", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int")
                        .HasColumnName("measure_id");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("PlantId", "MeasurementId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("Soil_Measurements", (string)null);
                });

            modelBuilder.Entity("DotNetSQL.Entities.WaterPump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Level")
                        .HasColumnType("real");

                    b.Property<int>("MaxLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("MinLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WaterPumps");
                });

            modelBuilder.Entity("DotNetSQL.Entities.MeasurementData", b =>
                {
                    b.HasOne("DotNetSQL.Entities.SoilHumidity", "SoilHumidityDetails")
                        .WithMany()
                        .HasForeignKey("SoilHumidityDetailsId");

                    b.Navigation("SoilHumidityDetails");
                });

            modelBuilder.Entity("DotNetSQL.Entities.SoilHumidity", b =>
                {
                    b.HasOne("DotNetSQL.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DotNetSQL.Entities.SoilMeasurement", b =>
                {
                    b.HasOne("DotNetSQL.Entities.MeasurementData", "MeasurementData")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetSQL.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementData");

                    b.Navigation("Plant");
                });
#pragma warning restore 612, 618
        }
    }
}
