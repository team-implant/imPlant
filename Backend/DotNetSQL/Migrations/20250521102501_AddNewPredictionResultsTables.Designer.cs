// <auto-generated />
using System;
using DotNetSQL.EFC;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetSQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521102501_AddNewPredictionResultsTables")]
    partial class AddNewPredictionResultsTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetSQL.Entities.PredictionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Batch")
                        .HasColumnType("int")
                        .HasColumnName("batch");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<string>("PredictionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prediction_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("PredictionResults", (string)null);
                });

            modelBuilder.Entity("DotNetSQL.Entities.PredictionResult", b =>
                {
                    b.HasOne("DotNetSQL.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Plant");
                });

#pragma warning restore 612, 618
        }
    }
}
