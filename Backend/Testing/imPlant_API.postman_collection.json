{
	"info": {
		"_postman_id": "100eff8f-3640-476f-9b51-b64807ac6d93",
		"name": "imPlant API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44874820"
	},
	"item": [
		{
			"name": "Temperature",
			"item": [
				{
					"name": "All Temperatures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"temperature\");\r",
									"        pm.expect(item).to.have.property(\"timestamp\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/temperature",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"temperature"
							]
						}
					},
					"response": []
				},
				{
					"name": "Temperature by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"temperature\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/temperature/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"temperature",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Light Intensity",
			"item": [
				{
					"name": "All Light Intensities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"lightIntensity\");\r",
									"        pm.expect(item).to.have.property(\"timestamp\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/light-intensity",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"light-intensity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Light Intensity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"lightIntensity\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/light-intensity/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"light-intensity",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Measurment",
			"item": [
				{
					"name": "All Measurements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"temperature\");\r",
									"        pm.expect(item).to.have.property(\"airHumidity\");\r",
									"        pm.expect(item).to.have.property(\"soilHumidity\");\r",
									"        pm.expect(item).to.have.property(\"lightIntensity\");\r",
									"        pm.expect(item).to.have.property(\"timestamp\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/measurements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"measurements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Measurement by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"temperature\");\r",
									"    pm.expect(jsonData).to.have.property(\"airHumidity\");\r",
									"    pm.expect(jsonData).to.have.property(\"soilHumidity\");\r",
									"    pm.expect(jsonData).to.have.property(\"lightIntensity\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/measurements/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"measurements",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Measurement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created measurement\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"temperature\");\r",
									"    pm.expect(jsonData).to.have.property(\"airHumidity\");\r",
									"    pm.expect(jsonData).to.have.property(\"soilHumidity\");\r",
									"    pm.expect(jsonData).to.have.property(\"lightIntensity\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"currentTimestamp\", new Date().toISOString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"temperature\": 25.5,\r\n  \"airHumidity\": 60.0,\r\n  \"soilHumidity\": 30.0,\r\n  \"lightIntensity\": 500.0,\r\n  \"timestamp\": \"{{currentTimestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5240/api/measurements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"measurements"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Air Humidity",
			"item": [
				{
					"name": "All Air Humidities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"airHumidity\");\r",
									"        pm.expect(item).to.have.property(\"timestamp\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/air-humidity",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"air-humidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Air Humidity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"airHumidity\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/air-humidity/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"air-humidity",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soil Humidity",
			"item": [
				{
					"name": "All Soil Humidities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"soilHumidity\");\r",
									"        pm.expect(item).to.have.property(\"timestamp\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/soil-humidity",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"soil-humidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Soil Humidity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"soilHumidity\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/soil-humidity/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"soil-humidity",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Water Pump",
			"item": [
				{
					"name": "All Water Pump",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"level\");\r",
									"        pm.expect(item).to.have.property(\"minLevel\");\r",
									"        pm.expect(item).to.have.property(\"maxLevel\");\r",
									"        pm.expect(item).to.have.property(\"timestamp\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/water-pump",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"water-pump"
							]
						}
					},
					"response": []
				},
				{
					"name": "Water Pump by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"level\");\r",
									"    pm.expect(jsonData).to.have.property(\"minLevel\");\r",
									"    pm.expect(jsonData).to.have.property(\"maxLevel\");\r",
									"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5240/api/water-pump/0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5240",
							"path": [
								"api",
								"water-pump",
								"0"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}